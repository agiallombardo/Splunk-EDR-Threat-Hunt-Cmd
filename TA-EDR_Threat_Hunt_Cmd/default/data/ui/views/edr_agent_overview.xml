<?xml version="1.1"?>
<dashboard theme="dark" stylesheet="edr_dashboard.css">
  <label>EDR Agent Overview (Enhanced)</label>
  <description>Enhanced overview of EDR agents across all tenants and providers</description>
  
  <searchTemplate>
    <![CDATA[
    | inputlookup edr_agents
    | search 
      $tenant_token$ 
      $provider_token$ 
      $status_token$ 
      $os_platform_token$
      $hostname_token$
    ]]>
  </searchTemplate>
  
  <fieldset submitButton="true" autoRun="true">
    <input type="multiselect" token="tenant_token" searchWhenChanged="false">
      <label>Tenant</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by tenant
          | sort tenant
        </query>
      </search>
      <fieldForLabel>tenant</fieldForLabel>
      <fieldForValue>tenant</fieldForValue>
      <delimiter> OR </delimiter>
      <valueSuffix>"</valueSuffix>
      <valuePrefix>tenant="</valuePrefix>
      <default>*</default>
      <choice value="*">All</choice>
    </input>
    
    <input type="multiselect" token="provider_token" searchWhenChanged="false">
      <label>Provider</label>
      <choice value="*">All</choice>
      <choice value="provider=&quot;crowdstrike&quot;">CrowdStrike</choice>
      <choice value="provider=&quot;sentinelone&quot;">SentinelOne</choice>
      <choice value="provider=&quot;defender&quot;">Microsoft Defender</choice>
      <default>*</default>
      <delimiter> OR </delimiter>
    </input>
    
    <input type="multiselect" token="status_token" searchWhenChanged="false">
      <label>Status</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by status
          | sort status
        </query>
      </search>
      <fieldForLabel>status</fieldForLabel>
      <fieldForValue>status</fieldForValue>
      <delimiter> OR </delimiter>
      <valueSuffix>"</valueSuffix>
      <valuePrefix>status="</valuePrefix>
      <default>*</default>
      <choice value="*">All</choice>
    </input>
    
    <input type="multiselect" token="os_platform_token" searchWhenChanged="false">
      <label>OS Platform</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by os_platform
          | sort os_platform
        </query>
      </search>
      <fieldForLabel>os_platform</fieldForLabel>
      <fieldForValue>os_platform</fieldForValue>
      <delimiter> OR </delimiter>
      <valueSuffix>"</valueSuffix>
      <valuePrefix>os_platform="</valuePrefix>
      <default>*</default>
      <choice value="*">All</choice>
    </input>
    
    <input type="text" token="hostname_token" searchWhenChanged="false">
      <label>Hostname (regex)</label>
      <default>*</default>
      <prefix>hostname="</prefix>
      <suffix>"</suffix>
    </input>
  </fieldset>
  
  <!-- Status Bar -->
  <row>
    <panel>
      <html>
        <div id="statusBar" class="edr-status-bar">
          <div class="status-message">Ready</div>
          <div class="status-progress">
            <div class="progress-bar"></div>
          </div>
        </div>
        
        <script>
          require(['jquery', 'splunkjs/mvc/searchmanager', 'splunkjs/mvc/utils'], function($, SearchManager, utils) {
            // Update status bar based on search status
            $(document).on('search:start', function() {
              $('#statusBar').attr('data-status', 'running');
              $('#statusBar .status-message').text('Running query...');
              $('#statusBar .progress-bar').css('width', '0%');
            });
            
            $(document).on('search:progress', function(e, data) {
              if (data && data.content && data.content.doneProgress) {
                const progress = Math.round(data.content.doneProgress * 100);
                $('#statusBar .progress-bar').css('width', progress + '%');
                $('#statusBar .status-message').text(`Processing: ${progress}% complete`);
              }
            });
            
            $(document).on('search:done', function() {
              $('#statusBar').attr('data-status', 'done');
              $('#statusBar .status-message').text('Query completed');
              $('#statusBar .progress-bar').css('width', '100%');
              
              // Fade out progress bar after 3 seconds
              setTimeout(function() {
                $('#statusBar .progress-bar').addClass('fade-out');
              }, 3000);
            });
            
            $(document).on('search:fail', function(e, data) {
              $('#statusBar').attr('data-status', 'error');
              $('#statusBar .status-message').text('Query failed: ' + (data && data.message ? data.message : 'Unknown error'));
            });
          });
        </script>
      </html>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Total Agent Count</title>
      <single>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | stats count
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="rangeColors">["0x53a051", "0x0877a6", "0xf8be34", "0xf1813f", "0xdc4e41"]</option>
        <option name="underLabel">Total Agents</option>
        <option name="colorBy">value</option>
      </single>
    </panel>
    
    <panel>
      <title>Agent Status Distribution</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | stats count by status
            | sort -count
          </query>
        </search>
        <option name="charting.chart">pie</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.legend.placement">right</option>
        <option name="charting.chart.showPercent">true</option>
      </chart>
    </panel>
    
    <panel>
      <title>Provider Distribution</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | stats count by provider
            | sort -count
          </query>
        </search>
        <option name="charting.chart">pie</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.legend.placement">right</option>
        <option name="charting.fieldColors">{"crowdstrike": "#F82B60", "sentinelone": "#00BFB3", "defender": "#0078D4"}</option>
        <option name="charting.chart.showPercent">true</option>
      </chart>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>OS Platform Distribution</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | stats count by os_platform
            | sort -count
          </query>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">true</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>Agents by Tenant</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | stats count by tenant
            | sort -count
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">true</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Agent Version Distribution (Top 10)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | stats count by version
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">true</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>Last Seen Distribution</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | eval last_seen_days_ago=round((now() - strptime(last_seen, "%Y-%m-%dT%H:%M:%SZ"))/86400,1)
            | eval time_bucket=case(
                isnull(last_seen_days_ago), "Unknown",
                last_seen_days_ago <= 1, "Less than 1 day",
                last_seen_days_ago <= 7, "1-7 days",
                last_seen_days_ago <= 30, "8-30 days",
                last_seen_days_ago > 30, "More than 30 days"
              )
            | stats count by time_bucket
            | sort case(
                time_bucket="Less than 1 day", 0,
                time_bucket="1-7 days", 1,
                time_bucket="8-30 days", 2,
                time_bucket="More than 30 days", 3,
                time_bucket="Unknown", 4
              )
          </query>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">true</option>
        <option name="charting.legend.placement">none</option>
        <option name="charting.fieldColors">{"Less than 1 day": "#53a051", "1-7 days": "#0877a6", "8-30 days": "#f8be34", "More than 30 days": "#dc4e41", "Unknown": "#808080"}</option>
      </chart>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Geographic Distribution of Agents</title>
      <viz type="leaflet_maps_app.maps-plus">
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | iplocation ip_address
            | stats count by ip_address lat lon City Country provider
            | sort -count
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="leaflet_maps_app.maps-plus.allValues">1</option>
        <option name="leaflet_maps_app.maps-plus.animate">1</option>
        <option name="leaflet_maps_app.maps-plus.autoFitAndZoom">1</option>
        <option name="leaflet_maps_app.maps-plus.autoFitVisibleLayers">0</option>
        <option name="leaflet_maps_app.maps-plus.center">0,0</option>
        <option name="leaflet_maps_app.maps-plus.cluster">1</option>
        <option name="leaflet_maps_app.maps-plus.clusterRadius">80</option>
        <option name="leaflet_maps_app.maps-plus.defaultHeight">300</option>
        <option name="leaflet_maps_app.maps-plus.disableClusteringAtZoom">10</option>
        <option name="leaflet_maps_app.maps-plus.drilldown">0</option>
        <option name="leaflet_maps_app.maps-plus.fullScreen">0</option>
        <option name="leaflet_maps_app.maps-plus.mapTile">http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</option>
        <option name="leaflet_maps_app.maps-plus.maxClusterRadius">80</option>
        <option name="leaflet_maps_app.maps-plus.maxZoom">19</option>
        <option name="leaflet_maps_app.maps-plus.minZoom">0</option>
        <option name="leaflet_maps_app.maps-plus.multiplePopups">0</option>
        <option name="leaflet_maps_app.maps-plus.scroll">1</option>
        <option name="leaflet_maps_app.maps-plus.showPathLines">0</option>
        <option name="leaflet_maps_app.maps-plus.showProgress">1</option>
        <option name="leaflet_maps_app.maps-plus.singleMarkerMode">0</option>
        <option name="leaflet_maps_app.maps-plus.spiderfyDistanceMultiplier">1</option>
        <option name="leaflet_maps_app.maps-plus.zoomAnimation">1</option>
        <option name="trellis.enabled">0</option>
        <option name="trellis.scales.shared">1</option>
        <option name="trellis.size">medium</option>
      </viz>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Agent Trend by Provider (Last 30 Days)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | eval _time=strptime(last_seen, "%Y-%m-%dT%H:%M:%SZ")
            | timechart span=1d count by provider
          </query>
          <earliest>-30d@d</earliest>
          <latest>now</latest>
        </search>
        <option name="charting.chart">line</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.legend.placement">right</option>
        <option name="charting.chart.showMarkers">true</option>
        <option name="charting.fieldColors">{"crowdstrike": "#F82B60", "sentinelone": "#00BFB3", "defender": "#0078D4"}</option>
      </chart>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Agent List</title>
      <input type="dropdown" token="agent_count">
        <label>Results Count</label>
        <choice value="20">20</choice>
        <choice value="50">50</choice>
        <choice value="100">100</choice>
        <choice value="200">200</choice>
        <choice value="500">500</choice>
        <default>20</default>
      </input>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $status_token$ 
              $os_platform_token$
              $hostname_token$
            | table agent_id hostname ip_address os_platform version status last_seen provider tenant
            | sort hostname
          </query>
        </search>
        <option name="count">$agent_count$</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">cell</option>
        <option name="rowNumbers">true</option>
        <option name="wrap">true</option>
        <option name="refresh.display">progressbar</option>
        <format field="last_seen" type="date" timeFormat="%Y-%m-%d %H:%M:%S"/>
        <format field="status" type="color">
          <colorPalette type="map">{"online":#53a051,"offline":#dc4e41,"unknown":#f8be34}</colorPalette>
        </format>
        <drilldown>
          <link target="_blank">
            <![CDATA[
            search?q=| makeresults | eval agent_id="$row.agent_id$" | edrhunt provider="$row.provider$" tenant="$row.tenant$" data_type="summary"
            ]]>
          </link>
        </drilldown>
      </table>
    </panel>
  </row>
  
  <!-- Export Options -->
  <row>
    <panel>
      <title>Export Agent Data</title>
      <input type="dropdown" token="export_format">
        <label>Export Format</label>
        <choice value="csv">CSV</choice>
        <choice value="json">JSON</choice>
        <choice value="xml">XML</choice>
        <default>csv</default>
      </input>
      <html>
        <div class="export-controls">
          <button id="exportBtn" class="btn btn-primary">Export Agents</button>
          <div id="exportStatus"></div>
        </div>
        
        <script>
          require(['jquery', 'splunkjs/mvc/searchmanager', 'splunkjs/mvc/utils'], function($, SearchManager, utils) {
            $('#exportBtn').on('click', function() {
              // Show loading indicator
              $('#exportStatus').html('<div class="loading">Preparing export...</div>');
              
              // Create export search
              const exportSearch = new SearchManager({
                id: 'export-search',
                search: '| inputlookup edr_agents | search $tenant_token$ $provider_token$ $status_token$ $os_platform_token$ $hostname_token$',
                earliest_time: '-30d@d',
                latest_time: 'now',
                preview: false,
                cache: false
              });
              
              // On search complete, export results
              exportSearch.on('search:done', function() {
                // Get results
                exportSearch.data('results').once('data', function() {
                  const results = exportSearch.data('results').data().results;
                  
                  if (results && results.length > 0) {
                    // Format depends on selected option
                    const format = $('#export_format').val();
                    
                    // Format data for export
                    let exportData;
                    const filename = 'edr_agents_' + new Date().toISOString().replace(/:/g, '-') + '.' + format;
                    
                    if (format === 'json') {
                      exportData = JSON.stringify(results, null, 2);
                      downloadFile(exportData, filename, 'application/json');
                    } else if (format === 'xml') {
                      exportData = jsonToXml(results);
                      downloadFile(exportData, filename, 'application/xml');
                    } else {
                      // Default to CSV
                      exportData = jsonToCsv(results);
                      downloadFile(exportData, filename, 'text/csv');
                    }
                    
                    $('#exportStatus').html('<div class="success">Export complete!</div>');
                  } else {
                    $('#exportStatus').html('<div class="error">No results to export</div>');
                  }
                });
              });
              
              // Handle search errors
              exportSearch.on('search:error', function(properties) {
                $('#exportStatus').html('<div class="error">Error exporting results: ' + properties.message + '</div>');
              });
              
              // Function to download file
              function downloadFile(content, filename, contentType) {
                const blob = new Blob([content], { type: contentType });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                setTimeout(function() {
                  document.body.removeChild(a);
                  window.URL.revokeObjectURL(url);
                }, 0);
              }
              
              // Function to convert JSON to CSV
              function jsonToCsv(jsonData) {
                if (jsonData.length === 0) return '';
                
                // Get all unique keys
                const keys = new Set();
                jsonData.forEach(item => {
                  Object.keys(item).forEach(key => keys.add(key));
                });
                
                const headers = Array.from(keys);
                let csv = headers.join(',') + '\n';
                
                jsonData.forEach(item => {
                  const row = headers.map(key => {
                    let value = item[key] || '';
                    // Handle array values
                    if (Array.isArray(value)) {
                      value = '"' + value.join(';') + '"';
                    } else if (typeof value === 'string') {
                      // Escape quotes
                      value = '"' + value.replace(/"/g, '""') + '"';
                    }
                    return value;
                  });
                  csv += row.join(',') + '\n';
                });
                
                return csv;
              }
              
              // Function to convert JSON to XML
              function jsonToXml(jsonData) {
                let xml = '<?xml version="1.0" encoding="UTF-8" ?>\n<agents>\n';
                
                jsonData.forEach((item, index) => {
                  xml += '  <agent index="' + index + '">\n';
                  
                  Object.entries(item).forEach(([key, value]) => {
                    if (Array.isArray(value)) {
                      xml += '    <' + key + '>\n';
                      value.forEach(val => {
                        xml += '      <item>' + escapeXml(val) + '</item>\n';
                      });
                      xml += '    </' + key + '>\n';
                    } else {
                      xml += '    <' + key + '>' + escapeXml(value) + '</' + key + '>\n';
                    }
                  });
                  
                  xml += '  </agent>\n';
                });
                
                xml += '</agents>';
                return xml;
              }
              
              // Function to escape XML special characters
              function escapeXml(unsafe) {
                if (unsafe === null || unsafe === undefined) return '';
                return String(unsafe)
                  .replace(/&/g, '&amp;')
                  .replace(/</g, '&lt;')
                  .replace(/>/g, '&gt;')
                  .replace(/"/g, '&quot;')
                  .replace(/'/g, '&apos;');
              }
            });
          });
        </script>
      </html>
    </panel>
  </row>
  
  <!-- Help Panel -->
  <row>
    <panel>
      <title>Help &amp; Documentation</title>
      <html>
        <div class="help-panel">
          <div class="help-section">
            <h3>About This Dashboard</h3>
            <p>This dashboard provides a comprehensive view of all EDR agents across your environment. You can filter agents by various criteria and view distribution statistics.</p>
          </div>
          
          <div class="help-section">
            <h3>How to Use This Dashboard</h3>
            <ol>
              <li><strong>Filter Agents</strong> - Use the filters at the top to narrow down which agents you want to view</li>
              <li><strong>View Distribution</strong> - The pie and bar charts show the distribution of agents by various properties</li>
              <li><strong>Geographic View</strong> - The map shows the geographical distribution of your agents</li>
              <li><strong>Agent Details</strong> - The agent list shows detailed information about each agent</li>
              <li><strong>Export Data</strong> - Use the export options to download agent data</li>
            </ol>
          </div>
          
          <div class="help-section">
            <h3>Agent Status Legend</h3>
            <ul>
              <li><span style="color: #53a051;">●</span> <strong>Online</strong> - Agent is connected and reporting</li>
              <li><span style="color: #dc4e41;">●</span> <strong>Offline</strong> - Agent is not currently connected</li>
              <li><span style="color: #f8be34;">●</span> <strong>Unknown</strong> - Agent status cannot be determined</li>
            </ul>
          </div>
          
          <div class="help-section">
            <h3>Agent Actions</h3>
            <p>Click on any agent in the table to view detailed information and perform actions like:</p>
            <ul>
              <li><strong>View Summary</strong> - See detailed agent information</li>
              <li><strong>Search Processes</strong> - Search for processes running on the agent</li>
              <li><strong>Search Network</strong> - View network connections from the agent</li>
              <li><strong>Search Files</strong> - View file activity on the agent</li>
            </ul>
          </div>
        </div>
      </html>
    </panel>
  </row>
</dashboard>
