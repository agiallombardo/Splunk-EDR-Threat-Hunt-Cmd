<?xml version="1.1"?>
<dashboard theme="dark" stylesheet="edr_dashboard.css">
  <label>EDR Threat Hunting (Enhanced)</label>
  <description>Advanced dashboard for threat hunting across EDR platforms with improved visualization and filtering</description>
  
  <searchTemplate>
    <![CDATA[
    | inputlookup edr_agents
    | search 
      $tenant_token$ 
      $provider_token$ 
      $os_platform_token$
      $hostname_token$
      $status_token$
    | head $limit_token$
    | edrhunt 
      provider=$provider_param$ 
      tenant=$tenant_param$ 
      data_type=$data_type_param$ 
      time_range=$time_range_param$ 
      query=$query_param$ 
      threads=$threads_param$
      include_raw=$include_raw_param$
      debug=$debug_param$
    ]]>
  </searchTemplate>
  
  <fieldset submitButton="true" autoRun="false">
    <input type="dropdown" token="tenant_param">
      <label>Tenant</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by tenant
          | sort tenant
        </query>
      </search>
      <fieldForLabel>tenant</fieldForLabel>
      <fieldForValue>tenant</fieldForValue>
      <default>default</default>
      <choice value="">All Tenants</choice>
    </input>
    
    <input type="dropdown" token="provider_param">
      <label>Provider</label>
      <choice value="crowdstrike">CrowdStrike</choice>
      <choice value="sentinelone">SentinelOne</choice>
      <choice value="defender">Microsoft Defender</choice>
      <default>crowdstrike</default>
    </input>
    
    <input type="dropdown" token="data_type_param">
      <label>Data Type</label>
      <choice value="processes">Processes</choice>
      <choice value="network">Network Connections</choice>
      <choice value="files">Files</choice>
      <choice value="registry">Registry (CrowdStrike only)</choice>
      <choice value="scripts">Scripts</choice>
      <choice value="threats">Threats/Alerts</choice>
      <default>processes</default>
    </input>
    
    <input type="dropdown" token="time_range_param">
      <label>Time Range</label>
      <choice value="1h">1 hour</choice>
      <choice value="6h">6 hours</choice>
      <choice value="12h">12 hours</choice>
      <choice value="24h">24 hours</choice>
      <choice value="3d">3 days</choice>
      <choice value="7d">7 days</choice>
      <choice value="14d">14 days</choice>
      <choice value="30d">30 days</choice>
      <default>24h</default>
    </input>
    
    <input type="text" token="query_param" searchWhenChanged="false">
      <label>Query Filter (Provider-specific syntax)</label>
      <default></default>
      <initialValue></initialValue>
    </input>
    
    <input type="multiselect" token="tenant_token" searchWhenChanged="false">
      <label>Filter Agents by Tenant</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by tenant
          | sort tenant
        </query>
      </search>
      <fieldForLabel>tenant</fieldForLabel>
      <fieldForValue>tenant</fieldForValue>
      <delimiter> OR </delimiter>
      <valueSuffix>"</valueSuffix>
      <valuePrefix>tenant="</valuePrefix>
      <default>*</default>
      <choice value="*">All</choice>
    </input>
    
    <input type="multiselect" token="provider_token" searchWhenChanged="false">
      <label>Filter Agents by Provider</label>
      <choice value="*">All</choice>
      <choice value="provider=&quot;crowdstrike&quot;">CrowdStrike</choice>
      <choice value="provider=&quot;sentinelone&quot;">SentinelOne</choice>
      <choice value="provider=&quot;defender&quot;">Microsoft Defender</choice>
      <default>*</default>
      <delimiter> OR </delimiter>
    </input>
    
    <input type="multiselect" token="os_platform_token" searchWhenChanged="false">
      <label>Filter Agents by OS Platform</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by os_platform
          | sort os_platform
        </query>
      </search>
      <fieldForLabel>os_platform</fieldForLabel>
      <fieldForValue>os_platform</fieldForValue>
      <delimiter> OR </delimiter>
      <valueSuffix>"</valueSuffix>
      <valuePrefix>os_platform="</valuePrefix>
      <default>*</default>
      <choice value="*">All</choice>
    </input>
    
    <input type="text" token="hostname_token" searchWhenChanged="false">
      <label>Filter by Hostname (regex)</label>
      <default>*</default>
      <prefix>hostname="</prefix>
      <suffix>"</suffix>
    </input>
    
    <input type="multiselect" token="status_token" searchWhenChanged="false">
      <label>Filter by Status</label>
      <search>
        <query>
          | inputlookup edr_agents
          | stats count by status
          | sort status
        </query>
      </search>
      <fieldForLabel>status</fieldForLabel>
      <fieldForValue>status</fieldForValue>
      <delimiter> OR </delimiter>
      <valueSuffix>"</valueSuffix>
      <valuePrefix>status="</valuePrefix>
      <default>*</default>
      <choice value="*">All</choice>
    </input>
    
    <input type="dropdown" token="limit_token">
      <label>Maximum Agents to Query</label>
      <choice value="10">10</choice>
      <choice value="20">20</choice>
      <choice value="50">50</choice>
      <choice value="100">100</choice>
      <choice value="200">200</choice>
      <choice value="500">500</choice>
      <default>20</default>
    </input>
    
    <input type="dropdown" token="threads_param">
      <label>Threads</label>
      <choice value="1">1</choice>
      <choice value="2">2</choice>
      <choice value="4">4</choice>
      <choice value="8">8</choice>
      <choice value="16">16</choice>
      <default>8</default>
    </input>
    
    <input type="dropdown" token="group_by">
      <label>Group Results By</label>
      <choice value="None">None</choice>
      <choice value="edr_hostname">Hostname</choice>
      <choice value="edr_process_names">Process Names</choice>
      <choice value="edr_domains">Domains</choice>
      <choice value="edr_remote_ips">Remote IPs</choice>
      <choice value="edr_file_names">File Names</choice>
      <default>None</default>
    </input>
    
    <input type="radio" token="include_raw_param">
      <label>Include Raw Data</label>
      <choice value="false">No</choice>
      <choice value="true">Yes</choice>
      <default>false</default>
    </input>
    
    <input type="radio" token="debug_param">
      <label>Debug Mode</label>
      <choice value="false">Off</choice>
      <choice value="true">On</choice>
      <default>false</default>
    </input>
  </fieldset>

  <!-- Status Bar -->
  <row>
    <panel>
      <html>
        <div id="statusBar" class="edr-status-bar">
          <div class="status-message">Ready to execute search</div>
          <div class="status-progress">
            <div class="progress-bar"></div>
          </div>
        </div>
        
        <script>
          require(['jquery', 'splunkjs/mvc/searchmanager', 'splunkjs/mvc/utils'], function($, SearchManager, utils) {
            // Update status bar based on search status
            $(document).on('search:start', function() {
              $('#statusBar').attr('data-status', 'running');
              $('#statusBar .status-message').text('Running query...');
              $('#statusBar .progress-bar').css('width', '0%');
            });
            
            $(document).on('search:progress', function(e, data) {
              if (data && data.content && data.content.doneProgress) {
                const progress = Math.round(data.content.doneProgress * 100);
                $('#statusBar .progress-bar').css('width', progress + '%');
                $('#statusBar .status-message').text(`Processing: ${progress}% complete`);
              }
            });
            
            $(document).on('search:done', function() {
              $('#statusBar').attr('data-status', 'done');
              $('#statusBar .status-message').text('Query completed');
              $('#statusBar .progress-bar').css('width', '100%');
              
              // Fade out progress bar after 3 seconds
              setTimeout(function() {
                $('#statusBar .progress-bar').addClass('fade-out');
              }, 3000);
            });
            
            $(document).on('search:fail', function(e, data) {
              $('#statusBar').attr('data-status', 'error');
              $('#statusBar .status-message').text('Query failed: ' + (data && data.message ? data.message : 'Unknown error'));
            });
          });
        </script>
      </html>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Execution Summary</title>
      <single>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | stats count as "Agent Count"
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="rangeColors">["0x53a051", "0x0877a6", "0xf8be34", "0xf1813f", "0xdc4e41"]</option>
        <option name="underLabel">Agents Selected</option>
        <option name="colorBy">value</option>
      </single>
    </panel>
    
    <panel depends="$data_type_param$=processes">
      <title>Process Execution Summary</title>
      <single>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=processes 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | stats 
              sum(edr_process_count) as "Total Processes" 
              dc(edr_hostname) as "Hosts with Matches"
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="rangeColors">["0x53a051", "0x0877a6", "0xf8be34", "0xf1813f", "0xdc4e41"]</option>
        <option name="refresh.display">progressbar</option>
        <option name="colorBy">value</option>
      </single>
    </panel>
    
    <panel depends="$data_type_param$=network">
      <title>Network Connection Summary</title>
      <single>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=network 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | stats 
              sum(edr_network_connection_count) as "Total Connections" 
              dc(edr_hostname) as "Hosts with Matches"
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="rangeColors">["0x53a051", "0x0877a6", "0xf8be34", "0xf1813f", "0xdc4e41"]</option>
        <option name="refresh.display">progressbar</option>
        <option name="colorBy">value</option>
      </single>
    </panel>
    
    <panel depends="$data_type_param$=files">
      <title>File Summary</title>
      <single>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=files 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | stats 
              sum(edr_file_count) as "Total Files" 
              dc(edr_hostname) as "Hosts with Matches"
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="rangeColors">["0x53a051", "0x0877a6", "0xf8be34", "0xf1813f", "0xdc4e41"]</option>
        <option name="refresh.display">progressbar</option>
        <option name="colorBy">value</option>
      </single>
    </panel>
  </row>
  
  <!-- Timeline View -->
  <row depends="$data_type_param$=processes OR $data_type_param$=threats">
    <panel>
      <title>Event Timeline</title>
      <viz type="timeline_app.timeline">
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=$data_type_param$ 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | eval timestamp=coalesce(edr_timestamp, _time)
            | eval category=case(
                $data_type_param$="processes", "Process",
                $data_type_param$="threats", "Threat",
                1==1, "Event"
              )
            | eval title=case(
                $data_type_param$="processes", mvindex(edr_process_names, 0),
                $data_type_param$="threats", mvindex(edr_threat_names, 0),
                1==1, "Event"
              )
            | eval description=case(
                $data_type_param$="processes", mvindex(edr_command_lines, 0),
                $data_type_param$="threats", mvindex(edr_threat_classifications, 0),
                1==1, ""
              )
            | eval host=edr_hostname
            | table timestamp category title description host
          </query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
        </search>
        <option name="timeline_app.timeline.axisTimeFormat">SECONDS</option>
        <option name="timeline_app.timeline.colorMode">categorical</option>
        <option name="timeline_app.timeline.maxColor">#DA5C5C</option>
        <option name="timeline_app.timeline.minColor">#FFE8E8</option>
        <option name="timeline_app.timeline.numOfBins">6</option>
        <option name="timeline_app.timeline.showHeader">true</option>
        <option name="timeline_app.timeline.timeAxisScale">linear</option>
        <option name="timeline_app.timeline.tooltipTimeFormat">SECONDS</option>
        <option name="timeline_app.timeline.useColors">true</option>
        <option name="timeline_app.timeline.useDefaultRowName">true</option>
        <option name="trellis.enabled">0</option>
        <option name="trellis.scales.shared">1</option>
        <option name="trellis.size">medium</option>
      </viz>
    </panel>
  </row>
  
  <!-- Process Visualization Row -->
  <row depends="$data_type_param$=processes">
    <panel>
      <title>Process Tree Visualization</title>
      <html>
        <div id="process-tree-viz" style="width:100%; height:600px;"></div>
        
        <script>
          require(['jquery', 'splunkjs/mvc/searchmanager', 'splunkjs/mvc/utils', 'processTree'], 
            function($, SearchManager, utils, ProcessTree) {
              // Create search manager for process data
              const processSearch = new SearchManager({
                id: 'process-tree-search',
                search: '| inputlookup edr_agents | search $tenant_token$ $provider_token$ $os_platform_token$ $hostname_token$ $status_token$ | head $limit_token$ | edrhunt provider=$provider_param$ tenant=$tenant_param$ data_type=processes time_range=$time_range_param$ query=$query_param$ threads=$threads_param$ include_raw=true debug=$debug_param$',
                earliest_time: '-24h@h',
                latest_time: 'now',
                preview: false,
                cache: false
              });
              
              // Initialize process tree visualization
              const vizElement = document.getElementById('process-tree-viz');
              const processTree = ProcessTree.initialize(vizElement, {
                colorByProvider: false,
                showCommandLine: true,
                theme: 'dark',
                initialCollapseDepth: 2
              });
              
              // Update visualization when search completes
              processSearch.on('search:done', function(properties) {
                processSearch.data('results').once('data', function() {
                  // Get results
                  const results = processSearch.data('results').data().results;
                  
                  if (results && results.length > 0) {
                    // Update visualization
                    processTree.updateData(results);
                  } else {
                    // No results
                    $(vizElement).html('<div class="empty-results">No process data found. Try adjusting your search parameters.</div>');
                  }
                });
              });
              
              // Handle search errors
              processSearch.on('search:error', function(properties) {
                $(vizElement).html('<div class="search-error">Error retrieving process data: ' + properties.message + '</div>');
              });
              
              // Update search when form changes
              $(document).on('change:tenant_token change:provider_token change:os_platform_token change:hostname_token change:status_token change:limit_token change:provider_param change:tenant_param change:time_range_param change:query_param change:threads_param change:include_raw_param change:debug_param', function() {
                processSearch.startSearch();
              });
            }
          );
        </script>
      </html>
    </panel>
  </row>
  
  <row depends="$data_type_param$=processes">
    <panel>
      <title>Process Names (Top 10)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=processes 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_process_match=true
            | mvexpand edr_process_names
            | stats count by edr_process_names
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>Process Command Lines</title>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=processes 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_process_match=true
            | mvexpand edr_command_lines
            | table edr_hostname edr_command_lines edr_timestamp
            | rename edr_hostname as "Hostname" edr_command_lines as "Command Line" edr_timestamp as "Timestamp"
          </query>
        </search>
        <option name="count">10</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="rowNumbers">false</option>
        <option name="wrap">true</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  
  <row depends="$data_type_param$=network">
    <panel>
      <title>Network Connections Map</title>
      <viz type="leaflet_maps_app.maps-plus">
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=network 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=true
              debug=$debug_param$
            | search edr_network_match=true
            | mvexpand edr_remote_ips
            | iplocation edr_remote_ips
            | stats count by edr_remote_ips lat lon City Country
            | sort -count
          </query>
        </search>
        <option name="drilldown">none</option>
        <option name="leaflet_maps_app.maps-plus.allValues">1</option>
        <option name="leaflet_maps_app.maps-plus.animate">1</option>
        <option name="leaflet_maps_app.maps-plus.autoFitAndZoom">1</option>
        <option name="leaflet_maps_app.maps-plus.autoFitVisibleLayers">0</option>
        <option name="leaflet_maps_app.maps-plus.center">0,0</option>
        <option name="leaflet_maps_app.maps-plus.cluster">1</option>
        <option name="leaflet_maps_app.maps-plus.clusterRadius">80</option>
        <option name="leaflet_maps_app.maps-plus.defaultHeight">600</option>
        <option name="leaflet_maps_app.maps-plus.disableClusteringAtZoom">10</option>
        <option name="leaflet_maps_app.maps-plus.drilldown">0</option>
        <option name="leaflet_maps_app.maps-plus.fullScreen">0</option>
        <option name="leaflet_maps_app.maps-plus.mapTile">http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</option>
        <option name="leaflet_maps_app.maps-plus.maxClusterRadius">80</option>
        <option name="leaflet_maps_app.maps-plus.maxZoom">19</option>
        <option name="leaflet_maps_app.maps-plus.minZoom">0</option>
        <option name="leaflet_maps_app.maps-plus.multiplePopups">0</option>
        <option name="leaflet_maps_app.maps-plus.scroll">1</option>
        <option name="leaflet_maps_app.maps-plus.showPathLines">1</option>
        <option name="leaflet_maps_app.maps-plus.showProgress">1</option>
        <option name="leaflet_maps_app.maps-plus.singleMarkerMode">0</option>
        <option name="leaflet_maps_app.maps-plus.spiderfyDistanceMultiplier">1</option>
        <option name="leaflet_maps_app.maps-plus.zoomAnimation">1</option>
        <option name="trellis.enabled">0</option>
        <option name="trellis.scales.shared">1</option>
        <option name="trellis.size">medium</option>
      </viz>
    </panel>
  </row>

  <row depends="$data_type_param$=network">
    <panel>
      <title>Remote IPs (Top 10)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=network 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_network_match=true
            | mvexpand edr_remote_ips
            | stats count by edr_remote_ips
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>Domains (Top 10)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=network 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_network_match=true
            | mvexpand edr_domains
            | stats count by edr_domains
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>Connection Port Distribution</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=network 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_network_match=true
            | mvexpand edr_remote_ports
            | stats count by edr_remote_ports
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">pie</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  
  <row depends="$data_type_param$=files">
    <panel>
      <title>File Names (Top 10)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=files 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_file_match=true
            | mvexpand edr_file_names
            | stats count by edr_file_names
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>File Paths</title>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=files 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_file_match=true
            | mvexpand edr_file_paths
            | table edr_hostname edr_file_paths edr_file_write_time
            | rename edr_hostname as "Hostname" edr_file_paths as "File Path" edr_file_write_time as "Write Time"
          </query>
        </search>
        <option name="count">10</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="rowNumbers">false</option>
        <option name="wrap">true</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
    
    <panel>
      <title>File Extensions</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=files 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_file_match=true
            | mvexpand edr_file_names
            | rex field=edr_file_names "(?i)\.(?<extension>[a-z0-9]{1,10})$"
            | stats count by extension
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">pie</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  
  <row depends="$data_type_param$=registry">
    <panel>
      <title>Registry Keys (Top 10)</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=registry 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_registry_match=true
            | mvexpand edr_registry_keys
            | stats count by edr_registry_keys
            | sort -count
            | head 10
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
    
    <panel>
      <title>Registry Values</title>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=registry 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_registry_match=true
            | mvexpand edr_registry_keys
            | mvexpand edr_registry_values
            | table edr_hostname edr_registry_keys edr_registry_values edr_registry_timestamp
            | rename edr_hostname as "Hostname" edr_registry_keys as "Registry Key" edr_registry_values as "Registry Value" edr_registry_timestamp as "Timestamp"
          </query>
        </search>
        <option name="count">10</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="rowNumbers">false</option>
        <option name="wrap">true</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  
  <row depends="$data_type_param$=threats">
    <panel>
      <title>Threat Names</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=threats 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_threat_match=true
            | mvexpand edr_threat_names
            | stats count by edr_threat_names
            | sort -count
          </query>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
      </chart>
    </panel>
    
    <panel>
      <title>Threat Classifications</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=threats 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_threat_match=true
            | mvexpand edr_threat_classifications
            | stats count by edr_threat_classifications
            | sort -count
          </query>
        </search>
        <option name="charting.chart">pie</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
    
    <panel>
      <title>Threat Severity Distribution</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=threats 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_threat_match=true
            | mvexpand edr_threat_severities
            | eval severity=case(
                edr_threat_severities=="low" OR edr_threat_severities=="1" OR edr_threat_severities=="Low", "Low",
                edr_threat_severities=="medium" OR edr_threat_severities=="2" OR edr_threat_severities=="Medium", "Medium",
                edr_threat_severities=="high" OR edr_threat_severities=="3" OR edr_threat_severities=="High", "High",
                edr_threat_severities=="critical" OR edr_threat_severities=="4" OR edr_threat_severities=="Critical", "Critical",
                1==1, "Unknown"
              )
            | stats count by severity
            | sort case(severity="Critical", 0, severity="High", 1, severity="Medium", 2, severity="Low", 3, severity="Unknown", 4)
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.fieldColors">{"Critical": "#D41F1F", "High": "#FF5733", "Medium": "#FFC300", "Low": "#3498DB", "Unknown": "#808080"}</option>
      </chart>
    </panel>
  </row>
  
  <row depends="$data_type_param$=scripts">
    <panel>
      <title>Script Types</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=scripts 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_script_match=true
            | mvexpand edr_script_types
            | stats count by edr_script_types
            | sort -count
          </query>
        </search>
        <option name="charting.chart">pie</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
    
    <panel>
      <title>Script Content (Sample)</title>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=scripts 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | search edr_script_match=true
            | mvexpand edr_script_contents
            | table edr_hostname edr_script_types edr_script_contents edr_script_timestamp
            | rename edr_hostname as "Hostname" edr_script_types as "Script Type" edr_script_contents as "Script Content" edr_script_timestamp as "Timestamp"
          </query>
        </search>
        <option name="count">5</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="rowNumbers">false</option>
        <option name="wrap">true</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Result Distribution by Host</title>
      <chart>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=$data_type_param$ 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | eval has_match = case(
                data_type="processes" AND edr_process_match=true, "Yes",
                data_type="network" AND edr_network_match=true, "Yes",
                data_type="files" AND edr_file_match=true, "Yes",
                data_type="registry" AND edr_registry_match=true, "Yes",
                data_type="scripts" AND edr_script_match=true, "Yes",
                data_type="threats" AND edr_threat_match=true, "Yes",
                1=1, "No"
              )
            | where has_match="Yes"
            | stats count by edr_hostname
            | sort -count
            | head 20
          </query>
        </search>
        <option name="charting.chart">bar</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="charting.chart.showDataLabels">all</option>
        <option name="charting.legend.placement">none</option>
      </chart>
    </panel>
  </row>
  
  <row>
    <panel>
      <title>Result Details</title>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=$data_type_param$ 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=$include_raw_param$
              debug=$debug_param$
            | eval has_match = case(
                data_type="processes" AND edr_process_match=true, "Yes",
                data_type="network" AND edr_network_match=true, "Yes",
                data_type="files" AND edr_file_match=true, "Yes",
                data_type="registry" AND edr_registry_match=true, "Yes",
                data_type="scripts" AND edr_script_match=true, "Yes",
                data_type="threats" AND edr_threat_match=true, "Yes",
                1=1, "No"
              )
            | where has_match="Yes"
            | table edr_hostname edr_os_platform edr_status edr_*
            | rename 
                edr_hostname as "Hostname" 
                edr_os_platform as "OS Platform" 
                edr_status as "Status"
          </query>
        </search>
        <option name="count">20</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">cell</option>
        <option name="rowNumbers">false</option>
        <option name="wrap">true</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  
  <!-- Export Options -->
  <row>
    <panel>
      <title>Export Results</title>
      <input type="dropdown" token="export_format">
        <label>Export Format</label>
        <choice value="csv">CSV</choice>
        <choice value="json">JSON</choice>
        <choice value="xml">XML</choice>
        <default>csv</default>
      </input>
      <html>
        <div class="export-controls">
          <button id="exportBtn" class="btn btn-primary">Export Results</button>
          <div id="exportStatus"></div>
        </div>
        
        <script>
          require(['jquery', 'splunkjs/mvc/searchmanager', 'splunkjs/mvc/utils'], function($, SearchManager, utils) {
            $('#exportBtn').on('click', function() {
              // Show loading indicator
              $('#exportStatus').html('<div class="loading">Preparing export...</div>');
              
              // Create export search
              const exportSearch = new SearchManager({
                id: 'export-search',
                search: '| inputlookup edr_agents | search $tenant_token$ $provider_token$ $os_platform_token$ $hostname_token$ $status_token$ | head $limit_token$ | edrhunt provider=$provider_param$ tenant=$tenant_param$ data_type=$data_type_param$ time_range=$time_range_param$ query=$query_param$ threads=$threads_param$ include_raw=true debug=false',
                earliest_time: '-24h@h',
                latest_time: 'now',
                preview: false,
                cache: false
              });
              
              // On search complete, export results
              exportSearch.on('search:done', function() {
                // Get results
                exportSearch.data('results').once('data', function() {
                  const results = exportSearch.data('results').data().results;
                  
                  if (results && results.length > 0) {
                    // Format depends on selected option
                    const format = $('#export_format').val();
                    
                    // Format data for export
                    let exportData;
                    const filename = 'edr_hunt_results_' + new Date().toISOString().replace(/:/g, '-') + '.' + format;
                    
                    if (format === 'json') {
                      exportData = JSON.stringify(results, null, 2);
                      downloadFile(exportData, filename, 'application/json');
                    } else if (format === 'xml') {
                      exportData = jsonToXml(results);
                      downloadFile(exportData, filename, 'application/xml');
                    } else {
                      // Default to CSV
                      exportData = jsonToCsv(results);
                      downloadFile(exportData, filename, 'text/csv');
                    }
                    
                    $('#exportStatus').html('<div class="success">Export complete!</div>');
                  } else {
                    $('#exportStatus').html('<div class="error">No results to export</div>');
                  }
                });
              });
              
              // Handle search errors
              exportSearch.on('search:error', function(properties) {
                $('#exportStatus').html('<div class="error">Error exporting results: ' + properties.message + '</div>');
              });
              
              // Function to download file
              function downloadFile(content, filename, contentType) {
                const blob = new Blob([content], { type: contentType });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                setTimeout(function() {
                  document.body.removeChild(a);
                  window.URL.revokeObjectURL(url);
                }, 0);
              }
              
              // Function to convert JSON to CSV
              function jsonToCsv(jsonData) {
                if (jsonData.length === 0) return '';
                
                // Get all unique keys
                const keys = new Set();
                jsonData.forEach(item => {
                  Object.keys(item).forEach(key => keys.add(key));
                });
                
                const headers = Array.from(keys);
                let csv = headers.join(',') + '\n';
                
                jsonData.forEach(item => {
                  const row = headers.map(key => {
                    let value = item[key] || '';
                    // Handle array values
                    if (Array.isArray(value)) {
                      value = '"' + value.join(';') + '"';
                    } else if (typeof value === 'string') {
                      // Escape quotes
                      value = '"' + value.replace(/"/g, '""') + '"';
                    }
                    return value;
                  });
                  csv += row.join(',') + '\n';
                });
                
                return csv;
              }
              
              // Function to convert JSON to XML
              function jsonToXml(jsonData) {
                let xml = '<?xml version="1.0" encoding="UTF-8" ?>\n<results>\n';
                
                jsonData.forEach((item, index) => {
                  xml += '  <result index="' + index + '">\n';
                  
                  Object.entries(item).forEach(([key, value]) => {
                    if (Array.isArray(value)) {
                      xml += '    <' + key + '>\n';
                      value.forEach(val => {
                        xml += '      <item>' + escapeXml(val) + '</item>\n';
                      });
                      xml += '    </' + key + '>\n';
                    } else {
                      xml += '    <' + key + '>' + escapeXml(value) + '</' + key + '>\n';
                    }
                  });
                  
                  xml += '  </result>\n';
                });
                
                xml += '</results>';
                return xml;
              }
              
              // Function to escape XML special characters
              function escapeXml(unsafe) {
                if (unsafe === null || unsafe === undefined) return '';
                return String(unsafe)
                  .replace(/&/g, '&amp;')
                  .replace(/</g, '&lt;')
                  .replace(/>/g, '&gt;')
                  .replace(/"/g, '&quot;')
                  .replace(/'/g, '&apos;');
              }
            });
          });
        </script>
      </html>
    </panel>
  </row>
  
  <!-- Debug Info Panel -->
  <row depends="$debug_param$=true">
    <panel>
      <title>Debug Information</title>
      <table>
        <search>
          <query>
            | inputlookup edr_agents
            | search 
              $tenant_token$ 
              $provider_token$ 
              $os_platform_token$
              $hostname_token$
              $status_token$
            | head $limit_token$
            | edrhunt 
              provider=$provider_param$ 
              tenant=$tenant_param$ 
              data_type=$data_type_param$ 
              time_range=$time_range_param$ 
              query=$query_param$ 
              threads=$threads_param$
              include_raw=true
              debug=true
            | table edr_debug_info edr_execution_time edr_query_count edr_api_count edr_error_count edr_hostname
            | rename edr_debug_info as "Debug Info" edr_execution_time as "Execution Time (s)" edr_query_count as "Query Count" edr_api_count as "API Call Count" edr_error_count as "Error Count" edr_hostname as "Hostname"
          </query>
        </search>
        <option name="count">20</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="wrap">true</option>
      </table>
    </panel>
  </row>
  
  <!-- Help Panel -->
  <row>
    <panel>
      <title>Help &amp; Documentation</title>
      <html>
        <div class="help-panel">
          <div class="help-section">
            <h3>How to Use This Dashboard</h3>
            <ol>
              <li><strong>Select EDR Provider</strong> - Choose between CrowdStrike, SentinelOne, or Microsoft Defender</li>
              <li><strong>Choose Data Type</strong> - Select the type of data to hunt for (processes, network connections, files, etc.)</li>
              <li><strong>Set Time Range</strong> - Specify how far back to look for data</li>
              <li><strong>Filter Agents</strong> - Optionally filter which agents to query by tenant, provider, OS, etc.</li>
              <li><strong>Add Query Filter</strong> - Optionally add a provider-specific query to filter results</li>
              <li><strong>Click Submit</strong> - Run the search and view results</li>
            </ol>
          </div>
          
          <div class="help-section">
            <h3>Provider-Specific Query Syntax</h3>
            <div class="tabbed-content">
              <div class="tab-headers">
                <div class="tab-header active" data-tab="crowdstrike">CrowdStrike</div>
                <div class="tab-header" data-tab="sentinelone">SentinelOne</div>
                <div class="tab-header" data-tab="defender">Microsoft Defender</div>
              </div>
              <div class="tab-content">
                <div class="tab-pane active" id="crowdstrike-help">
                  <p>CrowdStrike uses FQL (Falcon Query Language) for filtering:</p>
                  <pre>ComputerName='WS01' AND FileName='cmd.exe'</pre>
                  <p>Common operators: AND, OR, =, !=, LIKE, IN</p>
                  <p><a href="https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql" target="_blank">CrowdStrike FQL Documentation</a></p>
                </div>
                <div class="tab-pane" id="sentinelone-help">
                  <p>SentinelOne uses a JSON-based query language:</p>
                  <pre>{"computerName":"WS01", "processName":"cmd.exe"}</pre>
                  <p>Or a simplified SQL-like syntax:</p>
                  <pre>computerName = 'WS01' AND processName = 'cmd.exe'</pre>
                  <p><a href="https://success.sentinelone.com/api-docs" target="_blank">SentinelOne API Documentation</a></p>
                </div>
                <div class="tab-pane" id="defender-help">
                  <p>Microsoft Defender uses KQL (Kusto Query Language):</p>
                  <pre>DeviceName == "WS01" and FileName == "cmd.exe"</pre>
                  <p>Common operators: and, or, ==, !=, contains, startswith</p>
                  <p><a href="https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/advanced-hunting-query-language" target="_blank">Microsoft Defender KQL Documentation</a></p>
                </div>
              </div>
            </div>
          </div>
          
          <div class="help-section">
            <h3>Data Types</h3>
            <ul>
              <li><strong>Processes</strong> - Process execution events</li>
              <li><strong>Network</strong> - Network connections</li>
              <li><strong>Files</strong> - File creation and modification events</li>
              <li><strong>Registry</strong> - Registry key operations (CrowdStrike only)</li>
              <li><strong>Scripts</strong> - Script execution events</li>
              <li><strong>Threats</strong> - Detected threats and alerts</li>
            </ul>
          </div>
          
          <script>
            // Initialize tabs
            $(document).ready(function() {
              $('.tab-header').on('click', function() {
                // Remove active class from all headers and panes
                $('.tab-header').removeClass('active');
                $('.tab-pane').removeClass('active');
                
                // Add active class to clicked header and corresponding pane
                $(this).addClass('active');
                $('#' + $(this).data('tab') + '-help').addClass('active');
              });
            });
          </script>
        </div>
      </html>
    </panel>
  </row>
</dashboard>
    