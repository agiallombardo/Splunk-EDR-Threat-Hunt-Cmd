[Daily EDR Agent Discovery - CrowdStrike]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Discovers CrowdStrike EDR agents daily at 1 AM and updates the KV Store lookup
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | makeresults count=1 \
| fields - _time _raw \
| agentdiscovery provider="crowdstrike" operation="update" limit=5000

[Daily EDR Agent Discovery - SentinelOne]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 2 * * *
description = Discovers SentinelOne EDR agents daily at 2 AM and updates the KV Store lookup
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | makeresults count=1 \
| fields - _time _raw \
| agentdiscovery provider="sentinelone" operation="update" limit=5000

[Weekly EDR Agent Cleanup]
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 3 * * 0
description = Removes stale EDR agents from the KV Store lookup weekly on Sunday at 3 AM
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | makeresults count=1 \
| fields - _time _raw \
| agentdiscovery provider="crowdstrike" operation="update" ttl=7 limit=1

[Suspicious PowerShell Execution]
alert.severity = high
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 */6 * * *
description = Identifies suspicious PowerShell execution across EDR agents that may indicate malicious activity
disabled = 1
dispatch.earliest_time = -6h
dispatch.latest_time = now
enableSched = 
quantity = 0
relation = greater than
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | inputlookup edr_agents\
| search os_platform=Windows\
| edrhunt provider="crowdstrike" data_type="processes" time_range="6h" query="process_name:powershell.exe"\
| search edr_process_match=true\
| eval suspicious=case(\
    match(edr_command_lines, "(?i)-enc"), 1,\
    match(edr_command_lines, "(?i)-encoded"), 1,\
    match(edr_command_lines, "(?i)-command"), 1,\
    match(edr_command_lines, "(?i)-bypass"), 1,\
    match(edr_command_lines, "(?i)-noprofile"), 1,\
    match(edr_command_lines, "(?i)-windowstyle hidden"), 1,\
    match(edr_command_lines, "(?i)downloadstring"), 1,\
    match(edr_command_lines, "(?i)downloadfile"), 1,\
    match(edr_command_lines, "(?i)webclient"), 1,\
    match(edr_command_lines, "(?i)bitsadmin"), 1,\
    match(edr_command_lines, "(?i)frombase64string"), 1,\
    1=1, 0)\
| where suspicious=1\
| table edr_hostname edr_command_lines edr_process_names edr_tenant edr_provider edr_console
alert.digest_mode = 1
alert.suppress.fields = edr_hostname,edr_command_lines
alert.suppress.period = 24h
action.email = 1
action.email.to = security@example.com
action.email.subject = EDR Alert: Suspicious PowerShell Activity Detected
action.email.message.alert = Suspicious PowerShell activity was detected on one or more systems. This may indicate credential theft, lateral movement, or other malicious activity.\n\nAffected Systems: $result.edr_hostname$\n\nCommand Lines:\n$result.edr_command_lines$\n\nPlease investigate immediately.
action.notable = 1
action.notable.param.rule_title = Suspicious PowerShell Activity
action.notable.param.rule_description = PowerShell commands with encoded or suspicious parameters were detected, which may indicate malicious activity such as credential theft, lateral movement, or remote code execution.
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
action.notable.param.status = new
action.notable.param.drilldown_uri = /app/ta_edr_threat_hunt_cmd/edr_threat_hunting?form.provider_param=crowdstrike&form.data_type_param=processes&form.query_param=process_name%3Apowershell.exe&form.time_range_param=24h
action.slack = 0

[LOLBin Detection]
alert.severity = medium
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 */12 * * *
description = Detects the use of Living-off-the-Land Binaries (LOLBins) that are commonly abused by attackers
disabled = 1
dispatch.earliest_time = -12h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | inputlookup edr_agents\
| search os_platform=Windows\
| edrhunt provider="crowdstrike" data_type="processes" time_range="12h" query="process_name:(certutil.exe OR regsvr32.exe OR bitsadmin.exe OR mshta.exe OR rundll32.exe OR msiexec.exe OR cmstp.exe OR cscript.exe OR wscript.exe OR wmic.exe OR forfiles.exe OR installutil.exe OR te.exe)"\
| search edr_process_match=true\
| eval suspicious=case(\
    match(edr_process_names, "certutil\.exe") AND match(edr_command_lines, "(?i)encode|decode|-urlcache"), 1,\
    match(edr_process_names, "regsvr32\.exe") AND match(edr_command_lines, "(?i)scrobj\.dll|/i:|/s|/u|/n|http"), 1,\
    match(edr_process_names, "bitsadmin\.exe") AND match(edr_command_lines, "(?i)transfer|addfile|setnotifycmdline"), 1,\
    match(edr_process_names, "mshta\.exe") AND match(edr_command_lines, "(?i)javascript:|vbscript:|http|https"), 1,\
    match(edr_process_names, "rundll32\.exe") AND match(edr_command_lines, "(?i)javascript:|advpack\.dll|pcwutl\.dll|setupapi\.dll"), 1,\
    match(edr_process_names, "msiexec\.exe") AND match(edr_command_lines, "(?i)/y|http|https"), 1,\
    match(edr_process_names, "cmstp\.exe") AND match(edr_command_lines, "(?i)/s|/ns|/au"), 1,\
    match(edr_process_names, "cscript\.exe|wscript\.exe") AND match(edr_command_lines, "(?i)http|https|ftp"), 1,\
    match(edr_process_names, "wmic\.exe") AND match(edr_command_lines, "(?i)process call create"), 1,\
    match(edr_process_names, "forfiles\.exe") AND match(edr_command_lines, "(?i)/c|/p|cmd"), 1,\
    match(edr_process_names, "installutil\.exe") AND match(edr_command_lines, "(?i)/logfile=|/LogToConsole=false"), 1,\
    1=1, 0)\
| where suspicious=1\
| table edr_hostname edr_process_names edr_command_lines edr_tenant edr_provider edr_console
alert.digest_mode = 1
alert.suppress.fields = edr_hostname,edr_process_names
alert.suppress.period = 24h
action.email = 1
action.email.to = security@example.com
action.email.subject = EDR Alert: LOLBin Activity Detected
action.email.message.alert = Potential malicious use of Living-off-the-Land Binaries (LOLBins) was detected on one or more systems. These legitimate Windows binaries are commonly abused by attackers for malicious purposes.\n\nAffected Systems: $result.edr_hostname$\n\nProcess: $result.edr_process_names$\n\nCommand Line: $result.edr_command_lines$\n\nPlease investigate immediately.
action.notable = 1
action.notable.param.rule_title = LOLBin Suspicious Usage
action.notable.param.rule_description = Living-off-the-Land Binary (LOLBin) execution with suspicious parameters was detected. LOLBins are legitimate Windows executables that are commonly abused by attackers to evade detection.
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
action.notable.param.status = new
action.notable.param.drilldown_uri = /app/ta_edr_threat_hunt_cmd/edr_threat_hunting
action.slack = 0

[Network Connections to Unusual Ports]
alert.severity = medium
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 */8 * * *
description = Identifies network connections to unusual ports that may indicate command and control activity
disabled = 1
dispatch.earliest_time = -8h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | inputlookup edr_agents\
| edrhunt provider="crowdstrike" data_type="network" time_range="8h"\
| search edr_network_match=true\
| eval unusual_port = case(\
    match(edr_remote_ports, "^(443|80|8080|8443|53|123|389|636|22)$"), 0,\
    match(edr_remote_ports, "^(20|21|25|110|143|993|995|137|138|139|445)$"), 0,\
    match(edr_remote_ports, "^(1433|3306|5432|3389|5985|5986|9200|9300)$"), 0,\
    match(edr_remote_ports, "^(27017|6379|11211|9000|9090|9001|9002|47001)$"), 0,\
    match(edr_remote_ports, "^2222$"), 1,\
    match(edr_remote_ports, "^4444$"), 1,\
    match(edr_remote_ports, "^(8000|8888|9999)$"), 1,\
    tonumber(edr_remote_ports) > 1024 AND tonumber(edr_remote_ports) <= 49151, 1,\
    tonumber(edr_remote_ports) > 49151, 1,\
    0=0, 0)\
| where unusual_port=1\
| stats count by edr_hostname edr_remote_ips edr_remote_ports edr_domains\
| where count > 5\
| table edr_hostname edr_remote_ips edr_remote_ports edr_domains count
alert.digest_mode = 1
alert.suppress.fields = edr_hostname
alert.suppress.period = 24h
action.email = 1
action.email.to = security@example.com
action.email.subject = EDR Alert: Unusual Network Port Activity
action.email.message.alert = Multiple connections to unusual network ports were detected from one or more systems. This may indicate command and control (C2) activity or data exfiltration.\n\nAffected System: $result.edr_hostname$\n\nRemote IP: $result.edr_remote_ips$\n\nUnusual Port: $result.edr_remote_ports$\n\nDomain (if available): $result.edr_domains$\n\nConnection Count: $result.count$\n\nPlease investigate immediately.
action.notable = 1
action.notable.param.rule_title = Unusual Network Port Activity
action.notable.param.rule_description = Network connections to unusual ports were detected, which may indicate command and control activity, lateral movement, or data exfiltration.
action.notable.param.security_domain = network
action.notable.param.severity = medium
action.notable.param.status = new
action.notable.param.drilldown_uri = /app/ta_edr_threat_hunt_cmd/edr_threat_hunting?form.provider_param=crowdstrike&form.data_type_param=network&form.time_range_param=24h
action.slack = 0

[Agent Status Change Alert]
alert.severity = medium
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 */2 * * *
description = Monitors EDR agent status for changes that might indicate tampering or security issues
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | agentdiscovery provider="*" tenant="*" operation="update"\
| rename agent_id as edr_agent_id, hostname as edr_hostname, status as current_status, provider as edr_provider, tenant as edr_tenant\
| join type=left edr_agent_id [\
    | inputlookup edr_agents\
    | rename status as previous_status\
    | fields edr_agent_id previous_status\
  ]\
| where isnotnull(previous_status) AND current_status!=previous_status\
| eval status_degraded=case(\
    previous_status=="normal" AND (current_status=="offline" OR current_status=="unhealthy" OR current_status=="degraded"), 1,\
    previous_status=="active" AND (current_status=="offline" OR current_status=="disconnected" OR current_status=="inactive"), 1,\
    previous_status=="disconnected" AND current_status=="uninstalled", 1,\
    previous_status=="offline" AND current_status=="uninstalled", 1,\
    1=1, 0)\
| where status_degraded=1\
| table edr_agent_id edr_hostname previous_status current_status edr_provider edr_tenant
alert.digest_mode = 1
alert.suppress.fields = edr_hostname
alert.suppress.period = 8h
action.email = 1
action.email.to = security@example.com
action.email.subject = EDR Alert: Agent Status Change Detected
action.email.message.alert = An EDR agent status change was detected that might indicate tampering, agent uninstallation, or other security issues.\n\nAffected System: $result.edr_hostname$\n\nAgent ID: $result.edr_agent_id$\n\nPrevious Status: $result.previous_status$\n\nCurrent Status: $result.current_status$\n\nProvider: $result.edr_provider$\n\nTenant: $result.edr_tenant$\n\nPlease investigate whether this status change was authorized or if it represents potential tampering.
action.notable = 1
action.notable.param.rule_title = EDR Agent Status Change
action.notable.param.rule_description = An EDR agent status change was detected that might indicate tampering, agent uninstallation, or other security issues.
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
action.notable.param.status = new
action.notable.param.drilldown_uri = /app/ta_edr_threat_hunt_cmd/edr_agent_overview
action.slack = 0

[Multi-Provider Agent Gap Alert]
alert.severity = high
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 0 * * *
description = Identifies systems that appear in one EDR provider but not another (coverage gaps)
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | inputlookup edr_agents\
| search tenant=corporate\
| stats count by provider hostname\
| eval has_crowdstrike=if(provider="crowdstrike", 1, 0)\
| eval has_sentinelone=if(provider="sentinelone", 1, 0)\
| eval has_defender=if(provider="defender", 1, 0)\
| stats sum(has_crowdstrike) as has_crowdstrike, sum(has_sentinelone) as has_sentinelone, sum(has_defender) as has_defender by hostname\
| eval crowdstrike_only = if(has_crowdstrike=1 AND has_sentinelone=0 AND has_defender=0, 1, 0)\
| eval sentinelone_only = if(has_crowdstrike=0 AND has_sentinelone=1 AND has_defender=0, 1, 0)\
| eval defender_only = if(has_crowdstrike=0 AND has_sentinelone=0 AND has_defender=1, 1, 0)\
| eval missing_providers = case(\
    crowdstrike_only=1, "Missing SentinelOne and Defender",\
    sentinelone_only=1, "Missing CrowdStrike and Defender",\
    defender_only=1, "Missing CrowdStrike and SentinelOne",\
    has_crowdstrike=0 AND has_sentinelone=1 AND has_defender=1, "Missing CrowdStrike",\
    has_crowdstrike=1 AND has_sentinelone=0 AND has_defender=1, "Missing SentinelOne",\
    has_crowdstrike=1 AND has_sentinelone=1 AND has_defender=0, "Missing Defender",\
    1=1, "Complete Coverage")\
| where missing_providers != "Complete Coverage"\
| table hostname missing_providers has_crowdstrike has_sentinelone has_defender
alert.digest_mode = 1
alert.suppress.fields = hostname
alert.suppress.period = 7d
action.email = 1
action.email.to = security@example.com
action.email.subject = EDR Coverage Gap Alert
action.email.message.alert = EDR coverage gaps were detected on one or more systems. These systems are missing agents from one or more EDR providers, which could impact security visibility and response capabilities.\n\nAffected System: $result.hostname$\n\nMissing Providers: $result.missing_providers$\n\nCrowdStrike: $result.has_crowdstrike$\nSentinelOne: $result.has_sentinelone$\nDefender: $result.has_defender$\n\nPlease investigate and install the missing agents as appropriate.
action.notable = 1
action.notable.param.rule_title = EDR Coverage Gap Detected
action.notable.param.rule_description = Systems were identified with incomplete EDR coverage across multiple providers. This could result in security visibility gaps.
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
action.notable.param.status = new
action.notable.param.drilldown_uri = /app/ta_edr_threat_hunt_cmd/edr_agent_overview
action.slack = 0

[Daily Agent Discovery and Cleanup]
action.email = 0
action.notable = 0
action.slack = 0
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 0 1 * * *
description = Scheduled job to discover agents across all providers and tenants and clean up stale agent records
disabled = 1
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | makeresults\
| eval provider="crowdstrike"\
| append [| makeresults | eval provider="sentinelone"]\
| append [| makeresults | eval provider="defender"]\
| map search="| agentdiscovery provider=\"$provider$\" tenant=\"*\" console=\"*\" operation=\"update\" ttl=7"\
| stats count\
| eval message="Daily agent discovery completed successfully"

[EDR Agent Status Report]
action.email = 1
action.email.message = See attached CSV for the latest EDR agent status report.
action.email.subject = Daily EDR Agent Status Report
action.email.to = security@example.com
action.email.sendcsv = 1
action.email.inline = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 0 7 * * *
description = Daily report of EDR agent status across all tenants and providers
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | inputlookup edr_agents\
| eval last_seen_days_ago=round((now() - strptime(last_seen, "%Y-%m-%dT%H:%M:%S%z"))/86400,1)\
| eval current_status = status\
| eval status_category = case(\
    match(current_status, "(?i)normal|active|connected|online"), "Healthy",\
    match(current_status, "(?i)offline|disconnected"), "Offline",\
    match(current_status, "(?i)unhealthy|degraded|warning"), "Degraded",\
    match(current_status, "(?i)uninstalled|deleted"), "Uninstalled",\
    true(), "Other")\
| stats count as "Total Agents" by tenant provider status_category\
| appendcols [| inputlookup edr_agents | stats count as "Total Endpoints" by tenant]\
| eval "Coverage %" = round(('Total Agents' / 'Total Endpoints') * 100, 2)\
| sort tenant provider status_category
action.slack = 0
alert.severity = low

[New Agent Installation Report]
action.email = 1
action.email.message = EDR agents installed in the past 24 hours:
action.email.subject = New EDR Agent Installation Report
action.email.to = security@example.com
action.email.sendcsv = 1
action.email.inline = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 0 6 * * *
description = Daily report of newly installed EDR agents
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = search
search = | inputlookup edr_agents\
| eval first_seen_time=strptime(first_seen, "%Y-%m-%dT%H:%M:%S%z")\
| where first_seen_time > relative_time(now(), "-24h")\
| table agent_id hostname ip_address os_platform version status first_seen provider tenant\
| sort tenant provider hostname
action.slack = 0
alert.severity = low

[Automated EDR Integration Health Check]
action.email = 1
action.email.message = The EDR Integration Health Check has completed. Current health status: $result.health_status$\n\nHealth Score: $result.overall_score$/100\n\nAny issues detected have been added to the health dashboard for review.
action.email.subject = EDR Integration Health Check - $result.health_status$ ($result.overall_score$/100)
action.email.to = security-admins@example.com
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 0 6 * * *
description = Runs a daily health check of the EDR integration
disabled = 1
dispatch.earliest_time = -1m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = health_dashboard
search = | makeresults\
| eval command="health_check"\
| eval parameters="{\"collection\": \"edr_health_results\"}"\
| rest /services/edr/execute splunk_server=local method=post body="{\"command\":\"$command$\",\"parameters\":$parameters$}"\
| spath input=content path=health_status output=health_status\
| spath input=content path=overall_score output=overall_score\
| spath input=content path=app_version output=app_version\
| spath input=content path=timestamp output=timestamp\
| table health_status overall_score app_version timestamp\
| eval alert_threshold=case(\
    health_status=="unhealthy", 1,\
    health_status=="degraded", 1,\
    1==1, 0)\
| where alert_threshold=1

[Notify on EDR Service Degradation]
action.email = 1
action.email.message = An EDR Integration health degradation has been detected.\n\nPrevious health status: $result.previous_status$\nCurrent health status: $result.current_status$\n\nHealth score has changed from $result.previous_score$ to $result.current_score$.\n\nPlease review the health dashboard for details.
action.email.subject = EDR Integration Health Alert - $result.current_status$
action.email.to = security-admins@example.com
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
alert.severity = high
counttype = number of events
cron_schedule = */30 * * * *
description = Detects when the EDR integration health status degrades
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = ta_edr_threat_hunt_cmd
request.ui_dispatch_view = health_dashboard
search = | inputlookup edr_health_results\
| sort -_key\
| head 2\
| eval row=if(_key==max(_key), "current", "previous")\
| eval score=overall_score\
| eval status=health_status\
| stats first(score) as score first(status) as status by row\
| eval current_score=score[row="current"]\
| eval current_status=status[row="current"]\
| eval previous_score=score[row="previous"]\
| eval previous_status=status[row="previous"]\
| where isnotnull(current_score) AND isnotnull(previous_score)\
| eval status_degraded=case(\
    current_status=="unhealthy" AND previous_status!="unhealthy", 1,\
    current_status=="degraded" AND previous_status=="healthy", 1,\
    current_score < previous_score AND (current_score - previous_score) <= -10, 1,\
    1==1, 0)\
| where status_degraded=1